#This codes solves a compartmental model of the SIR model.
#The code is based on the following paper:
#hhttps://bmcinfectdis.biomedcentral.com/articles/10.1186/s12879-018-3425-x
#The code is written by:
#
#
#

import numpy as np
import matplotlib.pyplot as plt
import scipy.integrate as integrate
import pandas as pd
import seaborn as sns
import math
import random
import time
import os
import sys
import itertools
import multiprocessing
from multiprocessing import Pool
from functools import partial
from scipy.integrate import odeint
from sympy import ordered

# Define SIR Model ODE
def SIR_HS_ODE(y,t,rho,P,chi,gamma,rho_FH,mu_H,rho_HF,chi_rho,sigma_H,a_H,a_F,mu_F,sigma_F):
    #Initial conditions
    S = y[0]
    I = y[1]
    R = y[2]
    HS=y[3]
    HI=y[4]
    HR=y[5]
    F=y[6]

    #SIR Model
    # S,I,R,HS,HI,HR, F= y
    dSdt = -rho*P*(chi*HS/S)
    dIdt = rho*P*(chi*HS/S)-gamma*I
    dRdt = gamma*I
    dHSdt = rho_FH*S*F*(mu_H+rho_HF +chi_rho + sigma_H)*HS -(1-chi)*rho*P*(chi*HS/S)*HS
    dHIdt = rho_FH*I*F*(mu_H+rho_HF +chi_rho + sigma_H)*HI +a_H*I-(1-chi)*rho*P*(chi*HS/S)*HS - gamma*HI
    dHRdt = rho_FH*R*F*(mu_H+rho_HF +chi_rho + sigma_H)*HR + gamma*HI
    dFdt = a_F*I-(rho_FH+mu_F+sigma_F)*F -rho_HF*(HS+HI+HR)
    return([dSdt,dIdt,dRdt,dHSdt,dHIdt,dHRdt,dFdt])


t = np.linspace(0, 160, 160)

# Integrate the SIR equations over the time grid, t.
ret = odeint(SIR_HS_ODE, [3,4,4,50,1,1,4], t, args=(4,3,2,4,.1,.2,.2,.3,.4,.5,.6,.7,.8))
S, I, R, HS, HI, HR, F = ret.T


# Plot the data on three separate curves for S(t), I(t) and R(t)
fig = plt.figure(facecolor='w')
ax = fig.add_subplot(111, facecolor='#dddddd', axisbelow=True)
ax.plot(t, S, 'b', alpha=0.5, lw=2, label='Susceptible')
ax.plot(t, I, 'r', alpha=0.5, lw=2, label='Infected')
ax.plot(t, R, 'g', alpha=0.5, lw=2, label='Recovered with immunity')
ax.plot(t, HS, 'k', alpha=0.5, lw=2, label='HS')
ax.plot(t, HI, 'orange', alpha=0.5, lw=2, label='HI')
ax.plot(t, HR, 'purple', alpha=0.5, lw=2, label='HR')
ax.plot(t, F, 'pink', alpha=0.5, lw=2, label='F')
ax.set_xlabel('Time /days')
ax.set_ylabel('Number (1000s)')
#ax.set_ylim(0,1.2)
ax.yaxis.set_tick_params(length=0)
ax.xaxis.set_tick_params(length=0)
ax.grid(b=True, which='major', c='w', lw=2, ls='-')
legend = ax.legend()
legend.get_frame().set_alpha(0.5)
for spine in ('top', 'right', 'bottom', 'left'):
    ax.spines[spine].set_visible(False)
plt.show()