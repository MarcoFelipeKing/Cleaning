#This codes solves a compartmental model of the SIR-HS-HI-HR-F model called EITS
#The code is based on the following paper:
#https://bmcinfectdis.biomedcentral.com/articles/10.1186/s12879-018-3425-x
#The code is written by:
#
#
#

import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
# import seaborn as sns
# import math
# import random
# import time
# import os
# import sys
# import itertools
# import multiprocessing
# from multiprocessing import Pool
# from functools import partial
from scipy.integrate import odeint
import seaborn as sns



# Define SIR Model ODE
def SIR_HS_ODE(y,t,N,rho,P,chi,gamma,rho_FH,mu_H,rho_HF,sigma_H,a_H,a_F,mu_F,sigma_F):
    #Initial conditions
    # S = y[0]
    # I = y[1]
    # R = y[2]
    # HS=y[3]
    # HI=y[4]
    # HR=y[5]
    # F=y[6]

    # Model
    S,I,R,HS,HI,HR, F= y
    dSdt = -rho*P*(chi*HS/S)
    dIdt = rho*P*(chi*HS/S)-gamma*I
    dRdt = gamma*I
    dFdt = a_F*I-(rho_FH*N+mu_F+sigma_F)*F +rho_HF*(HS+HI+HR)
    dHSdt = rho_FH*S*F*(mu_H+rho_HF +chi*rho + sigma_H)*HS -(1-chi)*rho*P*(chi*HS/S)*HS
    dHIdt = rho_FH*I*F*(mu_H+rho_HF +chi*rho + sigma_H)*HI +a_H*I-(1-chi)*rho*P*(chi*HS/S)*HS - gamma*HI
    dHRdt = rho_FH*R*F*(mu_H+rho_HF +chi*rho + sigma_H)*HR +gamma*HI
    return([dSdt,dIdt,dRdt,dHSdt,dHIdt,dHRdt,dFdt])


t = np.linspace(0, 10, 100)
rho=15.8 #inoculation per hour
P=6.93E-5#6.93*10**-5 # infectivity parameter
chi=1 # Transfer to self
gamma=1/(6*24)
rho_T=60*0.1 #Rate of fomite touching (days −1)
tau_FH=0.1 # Transfer efficiency from fomite to hand
l= 0.005 #lambda Accessible surfaces (proportion)
kappa=0.0012*0.005/l#fingertip to surface ratio per individual
rho_FH=rho_T*tau_FH*kappa# rate of pathogen pick up from fomites to hand
mu_H=88.2 #Inactivation rate
tau_HF=0.025 #Transfer efficiency from hand to fomite
rho_HF=rho_T*tau_HF #rate of pathogen deposit from hand to fomite
q_H= 0.7#Hand cleaning efficacy (proportion)
theta_H= 0#Rate of hand cleaning (days −1)
sigma_H= q_H*theta_H#Effective hand cleaning rate
a=1E-4#Shedding rate (pathogen hours −1 people −1)
phi_H=0.15 # pathogen deposited on H
a_H=a*phi_H #rate pathogens are added to hands
phi_F=1-phi_H # pathogen deposited on F
a_F=a*phi_F*l
mu_F=0.121 #Inactivation rate
q_F= 0.9#Fomite cleaning efficacy (proportion)
theta_F= 0#Rate of fomite cleaning (days −1)
sigma_F=q_F*theta_F #Effective fomite cleaning rate
N=50

# Integrate the SIR equations over the time grid, t using a stiff solver

ret = odeint(SIR_HS_ODE, [48,2,0,0,0,0,20], t, args=(N,rho,P,chi,gamma,rho_FH,mu_H,rho_HF,sigma_H,a_H,a_F,mu_F,sigma_F))
# S, I, R, HS, HI, HR, F = ret.T


# convert ret to a dataframe
df = pd.DataFrame(ret, columns=['S', 'I', 'R', 'HS', 'HI', 'HR', 'F'])
#save df to csv
# df.to_csv('SIR_ODE_data.csv')

#bind t to df
df['t'] = t

# plot S, I, R, HS, HI, HR, F against t from df using seaborn
sns.set_style('darkgrid')
sns.set_context('talk')
#plot t against S using seaborn
sns.lineplot(x='t', y='S', data=df)
#plot t against I using seaborn
sns.lineplot(x='t', y='I', data=df)
#plot t against R using seaborn
sns.lineplot(x='t', y='R', data=df)
#plot t against HS using seaborn
sns.lineplot(x='t', y='HS', data=df)
#plot t against HI using seaborn
sns.lineplot(x='t', y='HI', data=df)
#plot t against HR using seaborn
sns.lineplot(x='t', y='HR', data=df)
#plot t against F using seaborn
sns.lineplot(x='t', y='F', data=df)
#plt.show()

# fig, ax = plt.subplots(7, 1, sharex=True)
# ax[0].plot(df['t'], df['S'], 'b', label='Susceptible')
# ax[0].plot(df['t'], df['I'], 'r', label='Infected')
# ax[0].plot(df['t'], df['R'], 'g', label='Recovered with immunity')
# ax[0].set_title('SIR Model')
# ax[0].set_ylabel('Number of People')
# ax[0].legend(loc='best')
# ax[1].plot(df['t'], df['HS'], 'b', label='Hand Infected')
# ax[1].plot(df['t'], df['HI'], 'r', label='Hand Infected')
# ax[1].plot(df['t'], df['HR'], 'g', label='Hand Infected')
# ax[1].set_ylabel('Number of People')
# ax[1].legend(loc='best')
# ax[2].plot(df['t'], df['F'], 'b', label='Fomite Infected')
# ax[2].set_ylabel('Number of People')
# ax[2].legend(loc='best')
# plt.show()


# # Plot the data on three separate curves for S(t), I(t) and R(t)
# fig = plt.figure(facecolor='w')
# ax = fig.add_subplot(111, facecolor='#dddddd', axisbelow=True)
# ax.plot(t, S, 'b', alpha=0.5, lw=2, label='Susceptible')
# ax.plot(t, I, 'r', alpha=0.5, lw=2, label='Infected')
# ax.plot(t, R, 'g', alpha=0.5, lw=2, label='Recovered with immunity')
# ax.plot(t, HS, 'k', alpha=0.5, lw=2, label='HS')
# ax.plot(t, HI, 'orange', alpha=0.5, lw=2, label='HI')
# ax.plot(t, HR, 'purple', alpha=0.5, lw=2, label='HR')
# ax.plot(t, F, 'pink', alpha=0.5, lw=2, label='F')
# ax.set_xlabel('Time /days')
# ax.set_ylabel('Number (1000s)')
# #ax.set_ylim(0,1.2)
# ax.yaxis.set_tick_params(length=0)
# ax.xaxis.set_tick_params(length=0)
# ax.grid(b=True, which='major', c='w', lw=2, ls='-')
# legend = ax.legend()
# legend.get_frame().set_alpha(0.5)
# for spine in ('top', 'right', 'bottom', 'left'):
#     ax.spines[spine].set_visible(False)
# plt.show()